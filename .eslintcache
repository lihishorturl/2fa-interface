[{"/Users/falcon/crypto/hardhat-test/frontend/src/index.js":"1","/Users/falcon/crypto/hardhat-test/frontend/src/App.js":"2","/Users/falcon/crypto/hardhat-test/frontend/src/ethereum.js":"3","/Users/falcon/crypto/mfa/frontend/src/index.js":"4","/Users/falcon/crypto/mfa/frontend/src/App.js":"5","/Users/falcon/crypto/mfa/frontend/src/ethereum.js":"6"},{"size":244,"mtime":1645269700328,"results":"7","hashOfConfig":"8"},{"size":874,"mtime":1645272735574,"results":"9","hashOfConfig":"8"},{"size":706,"mtime":1645270421734,"results":"10","hashOfConfig":"8"},{"size":500,"mtime":1644825510727,"results":"11","hashOfConfig":"12"},{"size":619,"mtime":1646705342603,"results":"13","hashOfConfig":"12"},{"size":761,"mtime":1646497037897,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1oubeqr",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"jag6w5",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/falcon/crypto/hardhat-test/frontend/src/index.js",[],["30","31"],"/Users/falcon/crypto/hardhat-test/frontend/src/App.js",[],"/Users/falcon/crypto/hardhat-test/frontend/src/ethereum.js",[],"/Users/falcon/crypto/mfa/frontend/src/index.js",[],["32","33"],"/Users/falcon/crypto/mfa/frontend/src/App.js",["34","35","36","37","38"],"import getBlockchain from './ethereum.js';\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from 'ethers'\n\nfunction App() {\n  const [contract, setContract] = useState(undefined);\n  const [address, setAddress] = useState(undefined);\n  const [secret, setSecret] = useState('');\n  const [referral, setReferral] = useState('');\n  const [idList, setIds] = useState([]);\n  const [targetId, setTargetId] = useState('');\n  const handleSecretChange = (e) => setSecret(e.target.value);\n  const handleIdsChange = (e) => setTargetId(e.target.value);\n\n  useEffect(() => {\n    const init = async () => {\n      const { signerAddress, uni2fa } = await getBlockchain();\n      console.log(signerAddress, uni2fa)\n      const price = await uni2fa.getPrice();\n      console.log(price.toNumber() / 1E18);\n      setContract(uni2fa);\n      setAddress(signerAddress);\n    };\n    init();\n  }, []);\n\n  async function mint() {\n    if(secret.length == 0) {\n      console.log('secret cannot be null')\n      return;\n    }\n    const transaction = await contract.mint(secret);\n    await transaction.wait();\n    ids();\n  }\n\n  async function ids() {\n    const ids = await contract.getTokenIds();\n    ids.forEach((id) => {\n      console.log(id.toNumber())\n    })\n    setIds(ids);\n  }\n\n  async function get() {\n    if(targetId == '') {\n      console.log('target id cannot be null')\n      return;\n    }\n    const secret = await contract.getSecret(targetId);\n    console.log(secret)\n  }\n\n  async function getMintedNumber() {\n    const number = await contract.getMintedNumber();\n    console.log(number.toNumber())\n  }\n\n  async function getBurnedNumber() {\n    const number = await contract.getBurnedNumber();\n    console.log(number.toNumber())\n  }\n\n  async function getAvaliable() {\n    const number = await contract.getAvaliableNumber();\n    console.log(number.toNumber())\n  }\n\n  async function getPrice() {\n    const number = await contract.getPrice();\n    console.log(number.toNumber())\n  }\n\n  async function getQuantity() {\n    const number = await contract.getQuantity();\n    console.log(number.toNumber())\n  }\n\n  async function punch() {\n    const tx = {\n      value: ethers.utils.parseEther(\"0.003\"),\n    }\n    const secret = await contract.punch(tx);\n    console.log(secret)\n  }\n\n  if(\n    typeof contract === 'undefined'\n  ) {\n    return 'Loading...';\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"text-3xl font-bold underline\">\n        Hello world!\n      </h1>\n      <div>\n        <input type=\"text\" value={secret} onChange={handleSecretChange} />\n        <button onClick={mint} class=\"btn\">mint</button>\n      </div>\n      <div>\n      <button onClick={ids}>ids</button>\n      <select value={targetId} onChange={handleIdsChange}>\n              {idList.map(item => {\n                  return (<option key={item.toNumber()} value={item.toNumber()}>{item.toNumber()}</option>);\n              })}\n            </select>\n      targetId: { targetId }\n      <button onClick={get}>get</button>\n      </div>\n      <button onClick={getMintedNumber}>getMintedNumber</button>\n      <button onClick={getBurnedNumber}>getBurnedNumber</button>\n      <button onClick={getAvaliable}>getAvaliable</button>\n      <button onClick={getQuantity}>getQuantity</button>\n      <button onClick={getPrice}>getPrice</button>\n      <button onClick={punch}>punch</button>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/falcon/crypto/mfa/frontend/src/ethereum.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"39","replacedBy":"43"},{"ruleId":"41","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":7,"column":10,"nodeType":"47","messageId":"48","endLine":7,"endColumn":17},{"ruleId":"45","severity":1,"message":"49","line":9,"column":10,"nodeType":"47","messageId":"48","endLine":9,"endColumn":18},{"ruleId":"45","severity":1,"message":"50","line":9,"column":20,"nodeType":"47","messageId":"48","endLine":9,"endColumn":31},{"ruleId":"51","severity":1,"message":"52","line":28,"column":22,"nodeType":"53","messageId":"54","endLine":28,"endColumn":24},{"ruleId":"51","severity":1,"message":"52","line":46,"column":17,"nodeType":"53","messageId":"54","endLine":46,"endColumn":19},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],["55"],["56"],"no-unused-vars","'address' is assigned a value but never used.","Identifier","unusedVar","'referral' is assigned a value but never used.","'setReferral' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]